/*What's an LRU cache? It's a cache that, when low on memory, evicts least recently used items. LRU is an eviction policy that makes a lot 
of sense for the typical kind of cache we all deal with on a daily basis.*/

  Typically LRU cache is implemented using a doubly linked list and a hash map. Doubly linked list is used to store list of pages with most
recently used page at the start of the list. So, as more pages are added to the list, least recently used pages are moved to the end of the
list with page at tail being the least recently used page in the list. Hash Map(key: page number, value: page) is used for O(1) access
to pages in cache.
  When a page is accessed, there can be 2 cases: 
  1. Page is present in the cache - If the page is already present in the cache, we move the page to the start of the list.
  2. Page is not present in the cache - If the page is not present in the cache, we add the page to the list.
  How to add a page to the list:
  a. If the cache is not full, add the new page to the start of the list.
  b. If the cache is full, remove the last node of the linked list and move the new page to the start of the list.
  
  
#include <bits/stdc++.h>
using namespace std;
 
class LRUCache
{
    // store keys of cache
    list<int> dq;
 
    // store references of key in cache
    unordered_map<int, list<int>::iterator> ma;
    int csize; //maximum capacity of cache
 
public:
    LRUCache(int);
    void refer(int);
    void display();
};
 
LRUCache::LRUCache(int n)
{
    csize = n;
}
 
/* Refers key x with in the LRU cache */
void LRUCache::refer(int x)
{
    // not present in cache
    if (ma.find(x) == ma.end())
    {
        // cache is full
        if (dq.size() == csize)
        {
            //delete least recently used element
            int last = dq.back();
            dq.pop_back();
            ma.erase(last);
        }
    }
 
    // present in cache
    else
        dq.erase(ma[x]);
 
    // update reference
    dq.push_front(x);
    ma[x] = dq.begin();
}
 
// display contents of cache
void LRUCache::display()
{
    for (auto it = dq.begin(); it != dq.end();
                                        it++)
        cout << (*it) << " ";
 
    cout << endl;
}

int main()
{
    LRUCache ca(4);
 
    ca.refer(1);
    ca.refer(2);
    ca.refer(3);
    ca.refer(1);
    ca.refer(4);
    ca.refer(5);
    ca.display();
 
    return 0;
}
